#summary Getting started guide for Java mapper library
#labels Featured

== Adding the !MapReduce Library To Your Application ==

Check out the !MapReduce code to a separate directory:

{{{
svn checkout http://appengine-mapreduce.googlecode.com/svn/trunk/java
}}}

Build the appropriate jar using `ant` in the directory you just checked out:

{{{
ant
}}}

Copy the resulting jars in the `dist/lib` directory into your application's `WEB-INF/lib` directory. If you're already using any of the dependency jars, there's no need to have duplicates.

Add the !MapReduce and Pipeline handlers to your `web.xml`:

{{{
  <servlet>
    <servlet-name>mapreduce</servlet-name>
    <servlet-class>
      com.google.appengine.tools.mapreduce.MapReduceServlet
    </servlet-class>
  </servlet>
  <servlet-mapping>
    <servlet-name>mapreduce</servlet-name>
    <url-pattern>/mapreduce/*</url-pattern>
  </servlet-mapping>

  <servlet>
    <servlet-name>pipeline</servlet-name>
    <servlet-class>
      com.google.appengine.tools.pipeline.impl.servlets.PipelineServlet
    </servlet-class>
  </servlet>
  <servlet-mapping>
    <servlet-name>pipeline</servlet-name>
    <url-pattern>/_ah/pipeline/*</url-pattern>
  </servlet-mapping>
}}}

You should also add a security constraint:

{{{
<security-constraint>
  <web-resource-collection>
    <url-pattern>/mapreduce/*</url-pattern>
  </web-resource-collection>
  <auth-constraint>
    <role-name>admin</role-name>
  </auth-constraint>
</security-constraint>
}}}

== Defining Mapper and Reducer ==

Create a class implementing `Mapper`. You can see an example of such a class [http://code.google.com/p/appengine-mapreduce/source/browse/trunk/java/example/com/google/appengine/demos/mapreduce/entitycount/CountMapper.java here].

Similarly, create a class implementing `Reducer`, as seen [http://code.google.com/p/appengine-mapreduce/source/browse/trunk/java/example/com/google/appengine/demos/mapreduce/entitycount/CountReducer.java here].


== Running the !MapReduce ==

Use `MapReduceJob.start()` as seen in the `start*Job()` methods [http://code.google.com/p/appengine-mapreduce/source/browse/trunk/java/example/com/google/appengine/demos/mapreduce/entitycount/Servlet.java here].


== Viewing the Status of your !MapReduce ==

`MapReduceJob.start()` returns a pipeline id.  The page `/_ah/pipeline/status.html?root=`_`<`PIPELINE_ID>_ on your application will display the status of this pipeline.


== Limitations ==

The code is a work in progress, and this is an early release.  If you run into problems, please don't hesitate to ask questions on the [https://groups.google.com/forum/?fromgroups#!forum/app-engine-pipeline-api mailing list] or to report [http://code.google.com/p/appengine-mapreduce/issues/list bugs].

The current shuffle implementation is limited to datasets that fit entirely in memory on a single instance.

The current code does not offer an overview page that displays all running jobs, but you can find the pipeline job IDs in your application's logs and in the task queue, and view the status as described above.