#summary Getting started guide for Java mapper library
#labels Featured

== Adding the !MapReduce Library To Your Application ==

Checkout the mapreduce folder to a separate directory:

{{{
svn checkout http://appengine-mapreduce.googlecode.com/svn/trunk/java
}}}

Build the appropriate jar using ant in the directory you just checked out:

{{{
ant
}}}

Copy the resulting jars in the dist/lib directory into your application's WEB-INF/lib directory. If you're already using any of the dependency jars, there's no need to have duplicates.

Add the mapreduce handler to your web.xml:

{{{
<servlet>
  <servlet-name>mapreduce</servlet-name>
  <servlet-class>com.google.appengine.tools.mapreduce.MapReduceServlet</servlet-class>
</servlet>
<servlet-mapping>
  <servlet-name>mapreduce</servlet-name>
  <url-pattern>/mapreduce/*</url-pattern>
</servlet-mapping>
}}}

== Defining a Mapper ==

Create a class implementing !AppEngineMapper. You can see an example of such a class [http://code.google.com/p/appengine-mapreduce/source/browse/trunk/java/example/com/google/appengine/demos/mapreduce/TestMapper.java here].

There are two ways to configure a mapper. You can either programmatically create a Configuration as seen [http://code.google.com/p/appengine-mapreduce/source/browse/trunk/java/example/com/google/appengine/demos/mapreduce/TestServlet.java here], or you can define a template using mapreduce.xml as seen [http://code.google.com/p/appengine-mapreduce/source/browse/trunk/java/example/war/WEB-INF/mapreduce.xml here]. There is a description of the mapreduce.xml format in the [http://code.google.com/p/appengine-mapreduce/source/browse/trunk/java/src/com/google/appengine/tools/mapreduce/ConfigurationTemplatePreprocessor.java javadoc for the ConfigurationTemplatePreprocessor class].

==Running the Mapper==

If you configured your mapper using the configuration template approach, then you can start the mapper by navigating your browser to `http://<your_app_id>.appspot.com/mapreduce/status`. Click the launch button to start one of the registered mapreduces, and then go to the mapreduce detail page to observe its status and control its execution.

If you used the programmatic approach, then just run whichever handler you added the creation code to. The mapper will show up on the status page (linked above) just as if you had run it using a template.

==Further Reading==
You can get more information about optional parameters, batch datastore mutations, and more at the [UserGuideJava Java User Guide]